#pragma once

#include <string>
#include <unordered_map>

struct Uniform;

namespace Vakol::Rendering::OpenGL
{
    /**
     * \brief Generate a shader program based on its sub-shader sources
     * \param vertSrc the source code for the vertex shader
     * \param geomSrc the source code for the geometry shader
     * \param tscSrc the source code for the tessellation control shader
     * \param tseSrc the source code for the tessellation evaluation shader
     * \param fragSrc the source code for the fragment shader
     * \return the shader program generated by OpenGL API
     */
    unsigned int GenerateShaderProgram(const std::string& vertSrc, const std::string& geomSrc,
                                       const std::string& tscSrc, const std::string& tseSrc,
                                       const std::string& fragSrc);

    /**
     * \brief binds a shader program within an OpenGL context.
     * \param program the shader program id generated by OpenGL
     */
    void BindShaderProgram(unsigned int program);
    /**
     * \brief unbinds a shader program within an OpenGL context.
     */
    void UnbindShaderProgram();

    /**
     * \brief Fetches the shader uniforms of a shader (OpenGL heavily optimizes uniform usage, so only the uniforms that
     * are actively being used will show-up here) \param shader the shader program id generated by OpenGL
     * \param uniforms the shader uniforms
     */
    void GetUniforms(unsigned int shader, std::unordered_map<std::string, Uniform>& uniforms);

    /**
     * \brief sets a bool uniform
     * \param location the location of the uniform
     * \param value the value of the uniform
     */
    void SetBool(int location, bool value);
    /**
     * \brief sets a float uniform
     * \param location the location of the uniform
     * \param value the value of the uniform
     */
    void SetFloat(int location, float value);
    /**
     * \brief sets a int uniform (capable of setting opaque data types such as sampler2D)
     * \param location the location of the uniform
     * \param value the value of the uniform
     */
    void SetInt(int location, int value);

    /**
     * \brief sets a vector uniform of 2 values.
     * \param location the location of the uniform
     * \param count the count of the uniform
     * \param value the value of the uniform
     */
    void SetVec2(int location, int count, const float* value);
    /**
     * \brief sets a vector uniform of 3 values
     * \param location the location of the uniform
     * \param count the count of the uniform
     * \param value the value of the uniform
     */
    void SetVec3(int location, int count, const float* value);
    /**
     * \brief sets a vector uniform of 4 values.
     * \param location the location of the uniform
     * \param count the count of the uniform
     * \param value the value of the uniform.
     */
    void SetVec4(int location, int count, const float* value);

    /**
     * \brief sets a 3x3 matrix uniform within an OpenGL context
     * \param location the location of the uniform.
     * \param count the count of the uniform.
     * \param name the name of the uniform
     * \param transpose is the matrix transposed?
     * \param value the value of the uniform
     */
    void SetMat3(int location, int count, const char* name, bool transpose, const float* value);
    /**
     * \brief sets a 4x4 matrix uniform within an OpenGL context.
     * \param location the location of the uniform
     * \param count the count of the uniform
     * \param name the name of the uniform
     * \param transpose is the matrix transposed?
     * \param value the value of the uniform
     */
    void SetMat4(int location, int count, const char* name, bool transpose, const float* value);
} // namespace Vakol::Rendering::OpenGL